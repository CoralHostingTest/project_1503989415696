namespace com.yahoo.ecosystem.mobile_payment.parsec
name Transaction
version 1
base "/mobilePayment"

include "ParsecResourceError.rdli"
include "common.rdli"

type MpPaymentType enum {
  CREDIT_CARD_TOKEN
}

// Token data.
type MpPaymentToken struct {
  // Token id.
  String id
  // Token value.
  String tokenValue
  // Token expire time.
  DateTime expire
  int64 expireDuration

  // The credit card id in bastet for payment.
  String creditCardId         (x_not_null="groups=create", x_null="groups=update")

  GUID buyerId
  MpPaymentType payType       (x_not_null="groups=create", x_null="groups=update")
  String ccode                (x_not_null="groups=create", x_null="groups=update", x_country_code="groups=create")
  String property             (x_not_null="groups=create", x_null="groups=update", x_size="min=1, max=10, groups=create")
  String longitude            (x_not_null="groups=update", x_pattern="regexp=\"^-?[0-9]{1,3}(\\\\.[0-9]{1,7})?$\", groups=create|update")
  String latitude             (x_not_null="groups=update", x_pattern="regexp=\"^-?[0-9]{1,3}(\\\\.[0-9]{1,7})?$\", groups=create|update")

  // The user's passcode.
  String passCode             (x_not_null="groups=create", x_null="groups=update")
}

// Generate token for mobile payment.
resource MpPaymentToken POST "/paymentTokens" (name=postPaymentToken) {
  // Token request data.
  MpPaymentToken paymentToken (x_must_validate="create")

  authenticate; // authenticate by ytcookie & wssid
  expected CREATED;
  exceptions {
      ParsecResourceError INTERNAL_SERVER_ERROR;
      ParsecResourceError BAD_REQUEST;
      ParsecResourceError UNAUTHORIZED;
      ParsecResourceError FORBIDDEN;
  }
}

// Update token position.
resource MpNullResult PUT "/paymentTokens/{tokenId}" (name=putPaymentToken) {
  // The token id
  String tokenId
  // Token request data to be updated.
  MpPaymentToken paymentToken (x_must_validate="update")

  authenticate; // authenticate by ytcookie & wssid
  expected NO_CONTENT;
  exceptions {
      ParsecResourceError INTERNAL_SERVER_ERROR;
      ParsecResourceError NOT_FOUND;
      ParsecResourceError BAD_REQUEST;
      ParsecResourceError UNAUTHORIZED;
      ParsecResourceError FORBIDDEN;
  }
}

type MpTransactionType enum {
  PAY
  REFUND
}

type MpTransStatus enum {
  NOT_PAID
  PAID_OK
  PAY_FAILED
  CANCELLED
  INVALID
}

type MpRefundStatus enum {
  INIT
  DONE
  CANCELLED
}

type MpApplyPointStatus enum {
  TO_BE_APPLIED
  APPLIED
}

type MpTransCreditCardSubType enum {
  YAHOO_CO_BRANDED
}

type MpSortOrder enum {
  // ascending order
  ASC
  // descending order
  DESC
}

type MpPartnerId enum {
  CTCB
}

type MpTransErrorCode enum {
  OK
  CARD_NOT_SUPPORTED
  CARD_EXPIRED
  EXCEEDED_CREDIT_LIMIT
  EXCEEDED_TRANSACTION_LIMIT
  SYSTEM_UNDER_MAINTENANCE
}

type MpTransaction struct {
  String id                   (x_not_null)
  MpTransactionType transType (x_not_null)
  MpPaymentType payType       (x_not_null)
  GUID buyerId                (x_not_null)
  String ccode                (x_not_null, x_country_code)
  String property             (x_not_null, x_size="min=1, max=10")
  String amount               (x_not_null, x_digits="integer=13, fraction=2")
  String currency             (x_not_null, x_currency)
  String realAmount           (x_not_null, x_digits="integer=13, fraction=2")
  String usedPoints           (optional)
  String summary              (optional)
  String detail               (optional)
  MpTransStatus status        (x_not_null)
  String partnerOrderId       (optional)
  DateTime date               (x_not_null, x_date_time)
  DateTime cancelDate         (optional)
  MpPartnerId partnerId       (x_not_null)
  String partnerTxSeq
  String merchantId           (x_not_empty, x_size="min=1, max=10")
  String merchantName         (x_not_empty, x_size="min=1, max=200")
  String corpId               (x_not_empty, x_size="min=1, max=20")
  String corpTxSeq            (x_not_empty, x_size="min=1, max=60")
  DateTime corpTxTime         (x_not_null, x_date_time)
  String storeId              (optional)
  String storeName            (optional)
  String creditCardId         (x_not_null)
  String ccFirstDigits
  String ccLastDigits
  MpTransCreditCardSubType ccSubType
  String ccDisplayName
  String appliedPoints
  MpRefundStatus refundStatus
  MpApplyPointStatus applyPointStatus
  DateTime paidDate
  DateTime createTime
  DateTime modifyTime
  String longitude
  String latitude
  MpTransErrorCode errorCode
}

type MpTransactionCollection struct {
  // A list of transaction
  array<MpTransaction> transactions;

  // Number of transactions returned
  int32 totalResults;

  // If there is more result, the nextOffset can pass to next query, return -1 if no offset anymore
  int32 nextOffset;
}

// list transactions belong to the user
resource MpTransactionCollection GET "/transactions?offset={offset}&count={count}&startTs={startTs}&endTs={endTs}&sortBy={sortBy}&sortOrder={sortOrder}&detail={detail}" (name=getTransactions) {

  // Offset of items of results.
  int32 offset        (optional, default=0, x_min="0")

  // Number of items to return.
  int32 count         (optional, default=10, x_min="0", x_max="100")

  // Resource create time as the start range.
  DateTime startTs  (x_not_null, x_date_time)

  // Resource create time as the end range.
  DateTime endTs    (x_not_null, x_date_time)

  // sort by specific field, only support createTime for now
  String sortBy       (optional, default="createTime", x_pattern="regexp=\"^createTime$\"")

  // Sort based on order of results.
  MpSortOrder sortOrder (optional, default=ASC)

  // Show summary txns or full detail txns, default is summary
  Bool detail       (optional, default=false)

  // ytcookie auth
  authenticate

  expected OK
  exceptions {
      ParsecResourceError INTERNAL_SERVER_ERROR
      ParsecResourceError BAD_REQUEST
      ParsecResourceError UNAUTHORIZED
      ParsecResourceError FORBIDDEN
  }
}

resource MpTransaction GET "/transactions/{transactionId}" (name=getTransaction) {
  // The transaction id
  String transactionId

  authenticate
  expected OK
  exceptions {
      ParsecResourceError INTERNAL_SERVER_ERROR
      ParsecResourceError BAD_REQUEST
      ParsecResourceError UNAUTHORIZED
      ParsecResourceError FORBIDDEN
      ParsecResourceError NOT_FOUND
  }
}

// Delete the transaction of user.
resource MpNullResult DELETE "/transactions" (name=deleteTransactions) {

    // authenticate by ytcookie & wssid
    authenticate;
    expected NO_CONTENT;
    exceptions {
        ParsecResourceError INTERNAL_SERVER_ERROR;
        ParsecResourceError BAD_REQUEST;
        ParsecResourceError UNAUTHORIZED;
        ParsecResourceError FORBIDDEN;
    }
}
